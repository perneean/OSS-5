[우승원(1~2)]
1. 서버 저장소
원격 저장소 / 서버 저장소: 로컬 저장소의 코드를 복제한 복사본. 공유 가능

1-1. 협업 저장소
여러명이 같이 협업하여 개발해 시간대비 좋은 품질의 소프트웨어를 만들 수 있도록 탄생한 도구. 
항상 인터넷에 연결하여 작업할 수 없는 개발 환경도 많이 있기 떄문에 깃은 분산형 모델을 선택

1-2. 연속된 작업
원격 저장소가 있다면 서버에 저장해 여러 컴퓨터에 코드 동기화 가능. 깃은 분산된 저장소를 하나로 통합하고 최신 코드를 배포할 수 있음. 
컴퓨터의 동일한 깃 저장소를 복제하고 결과물을 다시 서버로 통합.

1-3. 새 멤버
새로운 멤버가 프로젝트의 참여할 때 소스 코드의 마지막 버전을 공유. 깃의 원격 저장소 주소만 알려주면 모두 해결.

2. 깃허브 서버 준비
독립적인 깃 서버를 직접 운영하여 사용 가능. 항상 서버를 안정적으로 유지하기 힘들기 때문에 깃 호스팅으로 서버를 대체할 수 있음
깃 호스팅 : 직접 서버를 관리하지 않아도 쉽게 원격 저장소를 운영 가능

2-1. 깃허브
대표적인 깃호스팅 서비스. 사용자 이름은 저장소를 구별하는 주소값으로 사용.

2-2. 저장소 생성
공개용 저장소는 무제한으로 생성, 사용 가능. 비공개용은 제약과 유료서비스가 있음.
Repository name 에는 저장소 이름(대소문자, 숫자, 하이픈, 밑줄)을 입력. 한 소유자 안에서 같은 저장소 이름은 중복하여 생성할 수 없다. 

[박상혁(3~4)]
3 -깃허브 연동 및 원격 등록-
3-1. 로컬 저장소: 저장소 생성할 때 README 체크 여부에 따라 달라지는데 체크하지 않으면 초기화 및 복제 방법을 안내함.
원격 저장소에 연결하려면 로컬 저장소가 있어야 됨 방법은 로컬 저장소를 생성 후 연결, 기존 저장소에 연결 이렇게 두 개
첫 번째 방법으로 연결하려면 새 저장소를 생성 후 초기화함.

$ mkdir gitstudy05 –새 폴더 생성
$ cd gitstudy05
$ git init –저장소를 깃으로 초기화

다음으로 echo 명령어로 소개 페이지를 만듭니다.

$ echo “#git study05” >> README.md –파일 생성
README.md 파일을 추적 등록하고 커밋합니다.
$ git add README.md –스테이지에 등록
$ git commit –m “first commit” -커밋

3-2. 프로토콜: 서버 통신을 위해 프로토콜을 사용해야 하고 깃은 Local, HTTP, SSH, Git을 지원함.
Local: 로컬 컴퓨터에 원격 저장소를 생성하는 것을 의미하고 자신의 컴퓨터를 NFS등 서버로 이용할 때 편리함. 로컬을 서버로 이용할 때는 폴더 경로만 입력하면 됨.
($ git remote add 원격저장소별칭 폴더경로)

로컬의 장점은 간단한 서버 구축, 빠른 동작이고 단점은 모든 자료가 자신의 컴퓨터에 집중되는 위험도 있음.
HTTP: HTTP는 SSH처럼 많이 사용하는 프로토콜입니다. HTTP는 익명으로도, 계정을 이용하여 처리할 수 있음.
SSH: 깃에서 권장하는 프로토콜로, 높은 수준의 보안 통신으로 처리하기에 깃 서버를 안전하게 운영할 수 있고 사용법은 주소 앞에 ‘ssh://계정@주소’처럼 프로토콜 타입을 지정함.
SSH 접속할 때 인증서를 만들어 사용함. 그러면 별도 로그인을 안 해도 됨. 인증서는 공개키, 개인키로 구분하고 공개키는 서버에 등록, 개인키는 로컬에 저장함.
SSH는 HTTP와 달리 익명 접속할 수 없고 이 점이 기업에서 깃 서버 운영에 적합한 프로토콜이라고 할 수 있음.
Git: 데몬 서비스를 위한 전용 프로토콜 방식이고 SSH와 유사하지만 인증 시스템이 없어 보안에 취약할 수 있고 이 프로토콜은 잘 사용하지 않는다.

3-3. 원격 저장소의 리모트 목록 관리: 깃은 원격 저장소 관리할 때 remote 명령어를 사용함.
이것을 사용하면 현재 연결된 원격 저장소 목록 확인이 가능하고 등록과, 취소등 작업이 가능.
remote 명령어에서 –help 옵션으로 다양한 옵션을 확인할 수 있음.
remote 명령어를 독립적으로 사용하면 연결된 원격 저장소의 이름을 출력함.
($ git remote) -v 옵션을 추가하면 이름과 URL을 확인할 수 있음. $ git remote –v)
깃은 복수의 원격 저장소 연결 가능하고 리모트 저장소가 여러 개 있을 때는 목록을 모두 출력함.

3-4. 주소와 별칭: 로컬 저장소에 원격 저장소를 등록하려면 서버 주소가 필요.
깃허브 같은 저장소는 프로토콜 + 도메인 주소 형태이고 로컬에 서버 저장소를 생성할 때는 폴더 경로를 사용가능
긴 서버 URL 문자열을 별칭으로 만들어 사용할 수 있음. 
그 예로 origin을 별칭으로 많이 사용하는데 다른 이름도 사용 가능.

3-5. 원격 저장소에 연결: 연결할 때는 add 옵션을 사용함.
($ git remote add 원격저장소별칭 원격저장소URL)
원격 저장소를 추가할 때는 인자 값으로 원격 저장소 별칭과 원격 저장소의 URL을 같이 입력함.

infoh@hojin MINGW64 /e/gitstudy05 (master)
$ git remote add origin https://github.com/jinygit/gitstudy05.git -자신 서버 주소입력
infoh@hojin MINGW64 /e/gitstudy05 (master)
$ git remote –v –원격 저장소 목록 확인
origin https://github.com/jinygit/gitstudy05.git (fetch)
origin https://github.com/jinygit/gitstudy05.git (push)

원격 저장소가 연결되면 fetch, push 두 주소를 출력함. push는 서버로 전송하는 동작, fetch는 반대로 서버에서 가지고 오는 동작이고 별칭은 중복하여 선택할 수 없다.

3-6. 소스트리에서 원격 브랜치: 원격 저장소를 등록하면 기존 master 브랜치와 달리 또 하나의 브랜치가 표시됨.
master는 현재 로컬 저장소, local/master 같은 별칭/브랜치는 원격 저장소의 브랜치를 의미함.
로컬 저장소와 서버 저장소를 구분하여 표시하고 이것으로 서로 동기화한 시점을 판별할 수 있음.

3-7. 별칭 이름 변경과 정보: 별칭은 긴 서버 주소를 대체하고 등록된 서버 별칭 이름은 다시 변경할 수 있음.rename 옵션을 사용합니다.($ git remote rename 변경전 변경후)
remote 명령어는 간략한 원격 저장소 정보만 출력하고 더 상세한 정보는 show를 사용
($ git remote show 원격저장소별칭)

3-8.원격 서버 삭제: 깃을 사용하다 보면 풀 리퀘스트, 테스트 등 목적으로 임시 등록된 원격 저장소가 있는데 rm옵션으로 삭제할 수 있음.($ git remote rm 원격저장소별칭)

4 -서버전송-
1. push: 서버에 전송: 푸시는 원격 저장소로 커밋된 파일들을 업로드하는 동작. 원격 저장소로 로컬 깃 저장소의 내용을 전송할 때는 push 명령어를 사용함.
($ git push 원격저장소별칭 브랜치이름) 별칭 이름을 가지는 서버의 master 브랜치에 현재 브랜치를 업로드함.
이것을 하면 깃허브 저장소에 처음 푸시하면 서버에 새로운 master 브랜치를 생성.
그리고 로컬 master 브랜치 안에 있는 소스 코드를 서버의 master 브랜치로 업로드함.
자신의 로컬 저장소를 백업하는 용도로 원격 저장소를 사용 가능.


[곽민우(5~6)]
5 -자동으로 내려받기-
  *CLONE(복제) -복제는 기존 저장소를 이용하여 새로운 저장소를 생성하는 방법 중 하나.
              -CLONE명령어는 초기화 INIT명령어 외에 원격 서버 접속에 필요한 추가 설정을 자동으로 수행한다.
              -서버의 연결 설정을 마친 후 서버 안에 있는 모든 커밋된 코드 이렵들을 한 번에 내려받는다.
              -로컬 저장소를 생성한 후, 처음으로 서버에서 코드를 내려받을 때 편리
              EX)
              $git clone 복제할 저장소의 주소
              
              [로컬저장소]   >   [원격저장소]   >   [로컬저장소]
             (gitstudy05)    (gitstudy05.git)   (gitstudy05.clone)

  *PULL(서버에서 내려받기) -복제 후 원격 저장소의 갱신된 내용을 추가로 내려받으려면 pull명령어를 사용해야 한다.
                         -로컬 저장소보다 최신인 갱신된 원격 저장소의 커밋 정보를 현재 로컬 저장소로 내려받음
                         -pull을 주기적으로 사용하면 최신 내용을 로컬저장소에 유지할 수 있다.
                         -pull은 원격 저장소와 로컬 저장소 간 커밋을 반영할 수 있다.
                         EX)
                         $git pull
                         
6 -수동으로 내려받기-
원격 저장소 내용을 내려받는 방법은 크게 2가지로 PULL(풀)과 FETCH(페치)가있다.
두 방법의 차이는 병합을 자동으로 처리하는지 여부이다.

  *병합 - 원격 서버 파일과 로컬 파일을 하나로 합치는 과정

  *PULL(풀)의 자동 병합 -풀로 내려받은 커밋 정보는 임시 영역에 저장됨. 
                       -스테이지 영역이 아닌 원격 저장소를 위한 전용 임시 브랜치가 따로 있다.
                       -내려받은 최신 커밋들을 현재 브랜치로 자동 병합 처리함.
                       -혼자서 하는 프로제트는 PULL만으로 가능하지만 여러 개발자와 협업하는 과정에선 충돌이 발생하기도 함
                       -PULL로 자동 병합을 하지 못할 때는 FETCH(페치)를 사용
                       
  *FETCH(가져오기) -FETCH(페치)는 원격 저장소에서 코드를 수동으로 내려받는 작업.
                  -페치는 원격 저장소에서 커밋된 코드를 임시 브랜치로 내려받음.
                  -내려받은 후 현재 브랜치와 자동 병합하지 않는다.
                  -FETCH를 실행한 후에는 커밋이 추가된 것을 확인할 수 없다.
                  -페치는 원격 저장소의 커밋들만 가지고 왔을 뿐 로컬 저장소에서 어떤 작업도 하지 않는다.
                  -수동 병합인 페치를 하면 새로운 MASTER(MAIN)브랜치를 하나 더 생성하고 임시 브랜치에는 커밋을 할 수 없다.
                  -페치는 데이터를 내려받기만 할 뿐 자동 병합하지 않는다.
                  EX)
                  $git fetch 원격URL
                  
  *MERGE로 수동 병합 -페치로 내려받은 커밋을 로컬 저장소에 적용하려 병합을 시킬때 사용하는 명령어
                    EX)
                    $git merge 원격저장소별칭/브랜치이름
[염진섭(7~8)]
7 -순서-
7.1 최신상태
원격 저장소에 푸시 하려면 자신의 로컬 저장소를 최신 상태로 유지해야함.

커밋이 순차적이지 않을 때 깃은 푸시 동작을 거부.

푸시 동작이 거부되면 풀 또는 페치 작업으로 자신의 로컬 저장소를 갱신해 주어야 함.

7.2 충돌방지
깃이 최신상태에서만 푸시를 허용하는 것은 충돌을 방지하기 위해서이다.

원격 저장소의 커밋을 내려받는 풀 작업은 내려받은 커밋들을 현재 브랜치로 자동 병합합니다. 
커밋 내용이 순차적이지 않다면 병합 과정에서 충돌 발생.

최대한 충돌을 피할 수 있는 방법은 자신의 저장소와 원격 저장소의 상태를 자주 최신으로 유지하느 것.

권장 순서 : pull > coding > commit > pull > push

소스트리를 사용하면 푸시 하기 전 자신의 저장소와 어던 차이점이 있는지 쉽게 확인 가능.

인증 정보 캐시
호스팅 원격 저장소를 이용할 때는 아이디와 비밀번호가 있어야 접속 가능.

매번 아이디와 비밀번호를 입력하는 번거로움을 줄이기 위해 깃은 인증 정보 캐시(credential cache) 기능을 이용하여 아이디와 비밀번호를 임시적으로 보관할 수 있게함.
이 기능을 활성화하려면 환경설정이 필요.
$git config credential.helper cache

8 정리
깃은 다양한 종류의 서버를 지원하여 깃 서버를 직접 만들 수도 있고, 인기 있는 깃 호스팅 서버를 이용할 수 있다.

깃은 서버 역활을 수행하는 원격 저장소와 커밋 정보들을 주고 받는다.

원격 저장소 기능은 좀 더 많은 사람이 깃을 사용하게 하는 촉매제가 되었다.

오픈 소스는 깃과 공개된 원격 저장소를 사용하여 활발하게 수많은 사람과 협업 할 수있는 장점들을 제공한다.
그래서 깃은 오픈 소스를 활성화하는 데 가장 많은 기여를 하는 협업 툴이 되었다.
